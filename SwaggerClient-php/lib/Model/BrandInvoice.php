<?php
/**
 * BrandInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta/Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta/Voip\Model;

use \ArrayAccess;
use \Delta/Voip\ObjectSerializer;

/**
 * BrandInvoice Class Doc Comment
 *
 * @category Class
 * @package  Delta/Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BrandInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Brand_Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nif' => 'string',
        'postal_address' => 'string',
        'postal_code' => 'string',
        'town' => 'string',
        'province' => 'string',
        'country' => 'string',
        'registry_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nif' => null,
        'postal_address' => null,
        'postal_code' => null,
        'town' => null,
        'province' => null,
        'country' => null,
        'registry_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nif' => 'nif',
        'postal_address' => 'postalAddress',
        'postal_code' => 'postalCode',
        'town' => 'town',
        'province' => 'province',
        'country' => 'country',
        'registry_data' => 'registryData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nif' => 'setNif',
        'postal_address' => 'setPostalAddress',
        'postal_code' => 'setPostalCode',
        'town' => 'setTown',
        'province' => 'setProvince',
        'country' => 'setCountry',
        'registry_data' => 'setRegistryData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nif' => 'getNif',
        'postal_address' => 'getPostalAddress',
        'postal_code' => 'getPostalCode',
        'town' => 'getTown',
        'province' => 'getProvince',
        'country' => 'getCountry',
        'registry_data' => 'getRegistryData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nif'] = isset($data['nif']) ? $data['nif'] : null;
        $this->container['postal_address'] = isset($data['postal_address']) ? $data['postal_address'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['registry_data'] = isset($data['registry_data']) ? $data['registry_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nif'] === null) {
            $invalidProperties[] = "'nif' can't be null";
        }
        if ((mb_strlen($this->container['nif']) > 25)) {
            $invalidProperties[] = "invalid value for 'nif', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['postal_address'] === null) {
            $invalidProperties[] = "'postal_address' can't be null";
        }
        if ((mb_strlen($this->container['postal_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'postal_address', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ((mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['town'] === null) {
            $invalidProperties[] = "'town' can't be null";
        }
        if ((mb_strlen($this->container['town']) > 255)) {
            $invalidProperties[] = "invalid value for 'town', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['province'] === null) {
            $invalidProperties[] = "'province' can't be null";
        }
        if ((mb_strlen($this->container['province']) > 255)) {
            $invalidProperties[] = "invalid value for 'province', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) > 255)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['registry_data']) && (mb_strlen($this->container['registry_data']) > 1024)) {
            $invalidProperties[] = "invalid value for 'registry_data', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nif
     *
     * @return string
     */
    public function getNif()
    {
        return $this->container['nif'];
    }

    /**
     * Sets nif
     *
     * @param string $nif 
     *
     * @return $this
     */
    public function setNif($nif)
    {
        if ((mb_strlen($nif) > 25)) {
            throw new \InvalidArgumentException('invalid length for $nif when calling BrandInvoice., must be smaller than or equal to 25.');
        }

        $this->container['nif'] = $nif;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return string
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param string $postal_address 
     *
     * @return $this
     */
    public function setPostalAddress($postal_address)
    {
        if ((mb_strlen($postal_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $postal_address when calling BrandInvoice., must be smaller than or equal to 255.');
        }

        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code 
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling BrandInvoice., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string $town 
     *
     * @return $this
     */
    public function setTown($town)
    {
        if ((mb_strlen($town) > 255)) {
            throw new \InvalidArgumentException('invalid length for $town when calling BrandInvoice., must be smaller than or equal to 255.');
        }

        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province 
     *
     * @return $this
     */
    public function setProvince($province)
    {
        if ((mb_strlen($province) > 255)) {
            throw new \InvalidArgumentException('invalid length for $province when calling BrandInvoice., must be smaller than or equal to 255.');
        }

        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country 
     *
     * @return $this
     */
    public function setCountry($country)
    {
        if ((mb_strlen($country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $country when calling BrandInvoice., must be smaller than or equal to 255.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets registry_data
     *
     * @return string
     */
    public function getRegistryData()
    {
        return $this->container['registry_data'];
    }

    /**
     * Sets registry_data
     *
     * @param string $registry_data 
     *
     * @return $this
     */
    public function setRegistryData($registry_data)
    {
        if (!is_null($registry_data) && (mb_strlen($registry_data) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $registry_data when calling BrandInvoice., must be smaller than or equal to 1024.');
        }

        $this->container['registry_data'] = $registry_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * BannedAddressCollection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta\Voip\Model;

use \ArrayAccess;
use \Delta\Voip\ObjectSerializer;

/**
 * BannedAddressCollection Class Doc Comment
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BannedAddressCollection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BannedAddress-collection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ip' => 'string',
        'last_time_banned' => '\DateTime',
        'id' => 'int',
        'company' => 'int',
        'blocker' => 'string',
        'aor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ip' => null,
        'last_time_banned' => 'date-time',
        'id' => null,
        'company' => null,
        'blocker' => null,
        'aor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'last_time_banned' => 'lastTimeBanned',
        'id' => 'id',
        'company' => 'company',
        'blocker' => 'blocker',
        'aor' => 'aor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'last_time_banned' => 'setLastTimeBanned',
        'id' => 'setId',
        'company' => 'setCompany',
        'blocker' => 'setBlocker',
        'aor' => 'setAor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'last_time_banned' => 'getLastTimeBanned',
        'id' => 'getId',
        'company' => 'getCompany',
        'blocker' => 'getBlocker',
        'aor' => 'getAor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BLOCKER_ANTIFLOOD = 'antiflood';
    const BLOCKER_IPFILTER = 'ipfilter';
    const BLOCKER_ANTIBRUTEFORCE = 'antibruteforce';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockerAllowableValues()
    {
        return [
            self::BLOCKER_ANTIFLOOD,
            self::BLOCKER_IPFILTER,
            self::BLOCKER_ANTIBRUTEFORCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['last_time_banned'] = isset($data['last_time_banned']) ? $data['last_time_banned'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['blocker'] = isset($data['blocker']) ? $data['blocker'] : null;
        $this->container['aor'] = isset($data['aor']) ? $data['aor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ip']) && (mb_strlen($this->container['ip']) > 50)) {
            $invalidProperties[] = "invalid value for 'ip', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getBlockerAllowableValues();
        if (!is_null($this->container['blocker']) && !in_array($this->container['blocker'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'blocker', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['blocker']) && (mb_strlen($this->container['blocker']) > 50)) {
            $invalidProperties[] = "invalid value for 'blocker', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['aor']) && (mb_strlen($this->container['aor']) > 300)) {
            $invalidProperties[] = "invalid value for 'aor', the character length must be smaller than or equal to 300.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip 
     *
     * @return $this
     */
    public function setIp($ip)
    {
        if (!is_null($ip) && (mb_strlen($ip) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ip when calling BannedAddressCollection., must be smaller than or equal to 50.');
        }

        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets last_time_banned
     *
     * @return \DateTime
     */
    public function getLastTimeBanned()
    {
        return $this->container['last_time_banned'];
    }

    /**
     * Sets last_time_banned
     *
     * @param \DateTime $last_time_banned 
     *
     * @return $this
     */
    public function setLastTimeBanned($last_time_banned)
    {
        $this->container['last_time_banned'] = $last_time_banned;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return int
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param int $company 
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets blocker
     *
     * @return string
     */
    public function getBlocker()
    {
        return $this->container['blocker'];
    }

    /**
     * Sets blocker
     *
     * @param string $blocker 
     *
     * @return $this
     */
    public function setBlocker($blocker)
    {
        $allowedValues = $this->getBlockerAllowableValues();
        if (!is_null($blocker) && !in_array($blocker, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'blocker', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($blocker) && (mb_strlen($blocker) > 50)) {
            throw new \InvalidArgumentException('invalid length for $blocker when calling BannedAddressCollection., must be smaller than or equal to 50.');
        }

        $this->container['blocker'] = $blocker;

        return $this;
    }

    /**
     * Gets aor
     *
     * @return string
     */
    public function getAor()
    {
        return $this->container['aor'];
    }

    /**
     * Sets aor
     *
     * @param string $aor 
     *
     * @return $this
     */
    public function setAor($aor)
    {
        if (!is_null($aor) && (mb_strlen($aor) > 300)) {
            throw new \InvalidArgumentException('invalid length for $aor when calling BannedAddressCollection., must be smaller than or equal to 300.');
        }

        $this->container['aor'] = $aor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



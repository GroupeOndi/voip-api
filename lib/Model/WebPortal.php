<?php
/**
 * WebPortal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta\Voip\Model;

use \ArrayAccess;
use \Delta\Voip\ObjectSerializer;

/**
 * WebPortal Class Doc Comment
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebPortal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebPortal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'klear_theme' => 'string',
        'url_type' => 'string',
        'name' => 'string',
        'user_theme' => 'string',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'klear_theme' => null,
        'url_type' => null,
        'name' => null,
        'user_theme' => null,
        'id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'klear_theme' => 'klearTheme',
        'url_type' => 'urlType',
        'name' => 'name',
        'user_theme' => 'userTheme',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'klear_theme' => 'setKlearTheme',
        'url_type' => 'setUrlType',
        'name' => 'setName',
        'user_theme' => 'setUserTheme',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'klear_theme' => 'getKlearTheme',
        'url_type' => 'getUrlType',
        'name' => 'getName',
        'user_theme' => 'getUserTheme',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const URL_TYPE_GOD = 'god';
    const URL_TYPE_BRAND = 'brand';
    const URL_TYPE_ADMIN = 'admin';
    const URL_TYPE_USER = 'user';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUrlTypeAllowableValues()
    {
        return [
            self::URL_TYPE_GOD,
            self::URL_TYPE_BRAND,
            self::URL_TYPE_ADMIN,
            self::URL_TYPE_USER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['klear_theme'] = isset($data['klear_theme']) ? $data['klear_theme'] : '';
        $this->container['url_type'] = isset($data['url_type']) ? $data['url_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : '';
        $this->container['user_theme'] = isset($data['user_theme']) ? $data['user_theme'] : '';
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ((mb_strlen($this->container['url']) > 255)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['klear_theme']) && (mb_strlen($this->container['klear_theme']) > 200)) {
            $invalidProperties[] = "invalid value for 'klear_theme', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['url_type'] === null) {
            $invalidProperties[] = "'url_type' can't be null";
        }
        $allowedValues = $this->getUrlTypeAllowableValues();
        if (!is_null($this->container['url_type']) && !in_array($this->container['url_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'url_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['url_type']) > 25)) {
            $invalidProperties[] = "invalid value for 'url_type', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['user_theme']) && (mb_strlen($this->container['user_theme']) > 200)) {
            $invalidProperties[] = "invalid value for 'user_theme', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url 
     *
     * @return $this
     */
    public function setUrl($url)
    {
        if ((mb_strlen($url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $url when calling WebPortal., must be smaller than or equal to 255.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets klear_theme
     *
     * @return string
     */
    public function getKlearTheme()
    {
        return $this->container['klear_theme'];
    }

    /**
     * Sets klear_theme
     *
     * @param string $klear_theme 
     *
     * @return $this
     */
    public function setKlearTheme($klear_theme)
    {
        if (!is_null($klear_theme) && (mb_strlen($klear_theme) > 200)) {
            throw new \InvalidArgumentException('invalid length for $klear_theme when calling WebPortal., must be smaller than or equal to 200.');
        }

        $this->container['klear_theme'] = $klear_theme;

        return $this;
    }

    /**
     * Gets url_type
     *
     * @return string
     */
    public function getUrlType()
    {
        return $this->container['url_type'];
    }

    /**
     * Sets url_type
     *
     * @param string $url_type 
     *
     * @return $this
     */
    public function setUrlType($url_type)
    {
        $allowedValues = $this->getUrlTypeAllowableValues();
        if (!in_array($url_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'url_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($url_type) > 25)) {
            throw new \InvalidArgumentException('invalid length for $url_type when calling WebPortal., must be smaller than or equal to 25.');
        }

        $this->container['url_type'] = $url_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WebPortal., must be smaller than or equal to 200.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user_theme
     *
     * @return string
     */
    public function getUserTheme()
    {
        return $this->container['user_theme'];
    }

    /**
     * Sets user_theme
     *
     * @param string $user_theme 
     *
     * @return $this
     */
    public function setUserTheme($user_theme)
    {
        if (!is_null($user_theme) && (mb_strlen($user_theme) > 200)) {
            throw new \InvalidArgumentException('invalid length for $user_theme when calling WebPortal., must be smaller than or equal to 200.');
        }

        $this->container['user_theme'] = $user_theme;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



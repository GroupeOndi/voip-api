<?php
/**
 * InvoiceNumberSequence
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta\Voip\Model;

use \ArrayAccess;
use \Delta\Voip\ObjectSerializer;

/**
 * InvoiceNumberSequence Class Doc Comment
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceNumberSequence implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceNumberSequence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'prefix' => 'string',
        'sequence_length' => 'int',
        'increment' => 'int',
        'latest_value' => 'string',
        'iteration' => 'int',
        'version' => 'int',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'prefix' => null,
        'sequence_length' => null,
        'increment' => null,
        'latest_value' => null,
        'iteration' => null,
        'version' => null,
        'id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'prefix' => 'prefix',
        'sequence_length' => 'sequenceLength',
        'increment' => 'increment',
        'latest_value' => 'latestValue',
        'iteration' => 'iteration',
        'version' => 'version',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'prefix' => 'setPrefix',
        'sequence_length' => 'setSequenceLength',
        'increment' => 'setIncrement',
        'latest_value' => 'setLatestValue',
        'iteration' => 'setIteration',
        'version' => 'setVersion',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'prefix' => 'getPrefix',
        'sequence_length' => 'getSequenceLength',
        'increment' => 'getIncrement',
        'latest_value' => 'getLatestValue',
        'iteration' => 'getIteration',
        'version' => 'getVersion',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : '';
        $this->container['sequence_length'] = isset($data['sequence_length']) ? $data['sequence_length'] : null;
        $this->container['increment'] = isset($data['increment']) ? $data['increment'] : null;
        $this->container['latest_value'] = isset($data['latest_value']) ? $data['latest_value'] : '';
        $this->container['iteration'] = isset($data['iteration']) ? $data['iteration'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 40)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['prefix'] === null) {
            $invalidProperties[] = "'prefix' can't be null";
        }
        if ((mb_strlen($this->container['prefix']) > 20)) {
            $invalidProperties[] = "invalid value for 'prefix', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['sequence_length'] === null) {
            $invalidProperties[] = "'sequence_length' can't be null";
        }
        if (($this->container['sequence_length'] < 0)) {
            $invalidProperties[] = "invalid value for 'sequence_length', must be bigger than or equal to 0.";
        }

        if ($this->container['increment'] === null) {
            $invalidProperties[] = "'increment' can't be null";
        }
        if (($this->container['increment'] < 0)) {
            $invalidProperties[] = "invalid value for 'increment', must be bigger than or equal to 0.";
        }

        if ($this->container['iteration'] === null) {
            $invalidProperties[] = "'iteration' can't be null";
        }
        if (($this->container['iteration'] < 0)) {
            $invalidProperties[] = "invalid value for 'iteration', must be bigger than or equal to 0.";
        }

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InvoiceNumberSequence., must be smaller than or equal to 40.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string $prefix 
     *
     * @return $this
     */
    public function setPrefix($prefix)
    {
        if ((mb_strlen($prefix) > 20)) {
            throw new \InvalidArgumentException('invalid length for $prefix when calling InvoiceNumberSequence., must be smaller than or equal to 20.');
        }

        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets sequence_length
     *
     * @return int
     */
    public function getSequenceLength()
    {
        return $this->container['sequence_length'];
    }

    /**
     * Sets sequence_length
     *
     * @param int $sequence_length 
     *
     * @return $this
     */
    public function setSequenceLength($sequence_length)
    {

        if (($sequence_length < 0)) {
            throw new \InvalidArgumentException('invalid value for $sequence_length when calling InvoiceNumberSequence., must be bigger than or equal to 0.');
        }

        $this->container['sequence_length'] = $sequence_length;

        return $this;
    }

    /**
     * Gets increment
     *
     * @return int
     */
    public function getIncrement()
    {
        return $this->container['increment'];
    }

    /**
     * Sets increment
     *
     * @param int $increment 
     *
     * @return $this
     */
    public function setIncrement($increment)
    {

        if (($increment < 0)) {
            throw new \InvalidArgumentException('invalid value for $increment when calling InvoiceNumberSequence., must be bigger than or equal to 0.');
        }

        $this->container['increment'] = $increment;

        return $this;
    }

    /**
     * Gets latest_value
     *
     * @return string
     */
    public function getLatestValue()
    {
        return $this->container['latest_value'];
    }

    /**
     * Sets latest_value
     *
     * @param string $latest_value 
     *
     * @return $this
     */
    public function setLatestValue($latest_value)
    {
        $this->container['latest_value'] = $latest_value;

        return $this;
    }

    /**
     * Gets iteration
     *
     * @return int
     */
    public function getIteration()
    {
        return $this->container['iteration'];
    }

    /**
     * Sets iteration
     *
     * @param int $iteration 
     *
     * @return $this
     */
    public function setIteration($iteration)
    {

        if (($iteration < 0)) {
            throw new \InvalidArgumentException('invalid value for $iteration when calling InvoiceNumberSequence., must be bigger than or equal to 0.');
        }

        $this->container['iteration'] = $iteration;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version 
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * DdiDetailed
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta/Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta/Voip\Model;

use \ArrayAccess;
use \Delta/Voip\ObjectSerializer;

/**
 * DdiDetailed Class Doc Comment
 *
 * @category Class
 * @package  Delta/Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DdiDetailed implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ddi-detailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ddi' => 'string',
        'ddie164' => 'string',
        'id' => 'int',
        'company' => '\Delta/Voip\Model\Company',
        'ddi_provider' => '\Delta/Voip\Model\DdiProvider',
        'country' => '\Delta/Voip\Model\Country'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ddi' => null,
        'ddie164' => null,
        'id' => null,
        'company' => null,
        'ddi_provider' => null,
        'country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ddi' => 'ddi',
        'ddie164' => 'ddie164',
        'id' => 'id',
        'company' => 'company',
        'ddi_provider' => 'ddiProvider',
        'country' => 'country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ddi' => 'setDdi',
        'ddie164' => 'setDdie164',
        'id' => 'setId',
        'company' => 'setCompany',
        'ddi_provider' => 'setDdiProvider',
        'country' => 'setCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ddi' => 'getDdi',
        'ddie164' => 'getDdie164',
        'id' => 'getId',
        'company' => 'getCompany',
        'ddi_provider' => 'getDdiProvider',
        'country' => 'getCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ddi'] = isset($data['ddi']) ? $data['ddi'] : null;
        $this->container['ddie164'] = isset($data['ddie164']) ? $data['ddie164'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['ddi_provider'] = isset($data['ddi_provider']) ? $data['ddi_provider'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ddi'] === null) {
            $invalidProperties[] = "'ddi' can't be null";
        }
        if ((mb_strlen($this->container['ddi']) > 25)) {
            $invalidProperties[] = "invalid value for 'ddi', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['ddie164']) && (mb_strlen($this->container['ddie164']) > 25)) {
            $invalidProperties[] = "invalid value for 'ddie164', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ddi
     *
     * @return string
     */
    public function getDdi()
    {
        return $this->container['ddi'];
    }

    /**
     * Sets ddi
     *
     * @param string $ddi 
     *
     * @return $this
     */
    public function setDdi($ddi)
    {
        if ((mb_strlen($ddi) > 25)) {
            throw new \InvalidArgumentException('invalid length for $ddi when calling DdiDetailed., must be smaller than or equal to 25.');
        }

        $this->container['ddi'] = $ddi;

        return $this;
    }

    /**
     * Gets ddie164
     *
     * @return string
     */
    public function getDdie164()
    {
        return $this->container['ddie164'];
    }

    /**
     * Sets ddie164
     *
     * @param string $ddie164 
     *
     * @return $this
     */
    public function setDdie164($ddie164)
    {
        if (!is_null($ddie164) && (mb_strlen($ddie164) > 25)) {
            throw new \InvalidArgumentException('invalid length for $ddie164 when calling DdiDetailed., must be smaller than or equal to 25.');
        }

        $this->container['ddie164'] = $ddie164;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Delta/Voip\Model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Delta/Voip\Model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets ddi_provider
     *
     * @return \Delta/Voip\Model\DdiProvider
     */
    public function getDdiProvider()
    {
        return $this->container['ddi_provider'];
    }

    /**
     * Sets ddi_provider
     *
     * @param \Delta/Voip\Model\DdiProvider $ddi_provider ddi_provider
     *
     * @return $this
     */
    public function setDdiProvider($ddi_provider)
    {
        $this->container['ddi_provider'] = $ddi_provider;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Delta/Voip\Model\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Delta/Voip\Model\Country $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



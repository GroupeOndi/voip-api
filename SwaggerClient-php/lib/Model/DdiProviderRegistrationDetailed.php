<?php
/**
 * DdiProviderRegistrationDetailed
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta/Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta/Voip\Model;

use \ArrayAccess;
use \Delta/Voip\ObjectSerializer;

/**
 * DdiProviderRegistrationDetailed Class Doc Comment
 *
 * @category Class
 * @package  Delta/Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DdiProviderRegistrationDetailed implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DdiProviderRegistration-detailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'username' => 'string',
        'domain' => 'string',
        'realm' => 'string',
        'auth_username' => 'string',
        'auth_password' => 'string',
        'auth_proxy' => 'string',
        'expires' => 'int',
        'multi_ddi' => 'bool',
        'contact_username' => 'string',
        'id' => 'int',
        'ddi_provider' => '\Delta/Voip\Model\DdiProvider'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'username' => null,
        'domain' => null,
        'realm' => null,
        'auth_username' => null,
        'auth_password' => null,
        'auth_proxy' => null,
        'expires' => null,
        'multi_ddi' => null,
        'contact_username' => null,
        'id' => null,
        'ddi_provider' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'domain' => 'domain',
        'realm' => 'realm',
        'auth_username' => 'authUsername',
        'auth_password' => 'authPassword',
        'auth_proxy' => 'authProxy',
        'expires' => 'expires',
        'multi_ddi' => 'multiDdi',
        'contact_username' => 'contactUsername',
        'id' => 'id',
        'ddi_provider' => 'ddiProvider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'domain' => 'setDomain',
        'realm' => 'setRealm',
        'auth_username' => 'setAuthUsername',
        'auth_password' => 'setAuthPassword',
        'auth_proxy' => 'setAuthProxy',
        'expires' => 'setExpires',
        'multi_ddi' => 'setMultiDdi',
        'contact_username' => 'setContactUsername',
        'id' => 'setId',
        'ddi_provider' => 'setDdiProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'domain' => 'getDomain',
        'realm' => 'getRealm',
        'auth_username' => 'getAuthUsername',
        'auth_password' => 'getAuthPassword',
        'auth_proxy' => 'getAuthProxy',
        'expires' => 'getExpires',
        'multi_ddi' => 'getMultiDdi',
        'contact_username' => 'getContactUsername',
        'id' => 'getId',
        'ddi_provider' => 'getDdiProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['username'] = isset($data['username']) ? $data['username'] : '';
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : '';
        $this->container['realm'] = isset($data['realm']) ? $data['realm'] : '';
        $this->container['auth_username'] = isset($data['auth_username']) ? $data['auth_username'] : '';
        $this->container['auth_password'] = isset($data['auth_password']) ? $data['auth_password'] : '';
        $this->container['auth_proxy'] = isset($data['auth_proxy']) ? $data['auth_proxy'] : '';
        $this->container['expires'] = isset($data['expires']) ? $data['expires'] : null;
        $this->container['multi_ddi'] = isset($data['multi_ddi']) ? $data['multi_ddi'] : false;
        $this->container['contact_username'] = isset($data['contact_username']) ? $data['contact_username'] : '';
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ddi_provider'] = isset($data['ddi_provider']) ? $data['ddi_provider'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) > 64)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ((mb_strlen($this->container['domain']) > 190)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 190.";
        }

        if ($this->container['realm'] === null) {
            $invalidProperties[] = "'realm' can't be null";
        }
        if ((mb_strlen($this->container['realm']) > 64)) {
            $invalidProperties[] = "invalid value for 'realm', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['auth_username'] === null) {
            $invalidProperties[] = "'auth_username' can't be null";
        }
        if ((mb_strlen($this->container['auth_username']) > 64)) {
            $invalidProperties[] = "invalid value for 'auth_username', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['auth_password'] === null) {
            $invalidProperties[] = "'auth_password' can't be null";
        }
        if ((mb_strlen($this->container['auth_password']) > 64)) {
            $invalidProperties[] = "invalid value for 'auth_password', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['auth_proxy'] === null) {
            $invalidProperties[] = "'auth_proxy' can't be null";
        }
        if ((mb_strlen($this->container['auth_proxy']) > 64)) {
            $invalidProperties[] = "invalid value for 'auth_proxy', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['expires'] === null) {
            $invalidProperties[] = "'expires' can't be null";
        }
        if ($this->container['contact_username'] === null) {
            $invalidProperties[] = "'contact_username' can't be null";
        }
        if ((mb_strlen($this->container['contact_username']) > 64)) {
            $invalidProperties[] = "invalid value for 'contact_username', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['ddi_provider'] === null) {
            $invalidProperties[] = "'ddi_provider' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username 
     *
     * @return $this
     */
    public function setUsername($username)
    {
        if ((mb_strlen($username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $username when calling DdiProviderRegistrationDetailed., must be smaller than or equal to 64.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain 
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        if ((mb_strlen($domain) > 190)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling DdiProviderRegistrationDetailed., must be smaller than or equal to 190.');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets realm
     *
     * @return string
     */
    public function getRealm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param string $realm 
     *
     * @return $this
     */
    public function setRealm($realm)
    {
        if ((mb_strlen($realm) > 64)) {
            throw new \InvalidArgumentException('invalid length for $realm when calling DdiProviderRegistrationDetailed., must be smaller than or equal to 64.');
        }

        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets auth_username
     *
     * @return string
     */
    public function getAuthUsername()
    {
        return $this->container['auth_username'];
    }

    /**
     * Sets auth_username
     *
     * @param string $auth_username 
     *
     * @return $this
     */
    public function setAuthUsername($auth_username)
    {
        if ((mb_strlen($auth_username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $auth_username when calling DdiProviderRegistrationDetailed., must be smaller than or equal to 64.');
        }

        $this->container['auth_username'] = $auth_username;

        return $this;
    }

    /**
     * Gets auth_password
     *
     * @return string
     */
    public function getAuthPassword()
    {
        return $this->container['auth_password'];
    }

    /**
     * Sets auth_password
     *
     * @param string $auth_password 
     *
     * @return $this
     */
    public function setAuthPassword($auth_password)
    {
        if ((mb_strlen($auth_password) > 64)) {
            throw new \InvalidArgumentException('invalid length for $auth_password when calling DdiProviderRegistrationDetailed., must be smaller than or equal to 64.');
        }

        $this->container['auth_password'] = $auth_password;

        return $this;
    }

    /**
     * Gets auth_proxy
     *
     * @return string
     */
    public function getAuthProxy()
    {
        return $this->container['auth_proxy'];
    }

    /**
     * Sets auth_proxy
     *
     * @param string $auth_proxy 
     *
     * @return $this
     */
    public function setAuthProxy($auth_proxy)
    {
        if ((mb_strlen($auth_proxy) > 64)) {
            throw new \InvalidArgumentException('invalid length for $auth_proxy when calling DdiProviderRegistrationDetailed., must be smaller than or equal to 64.');
        }

        $this->container['auth_proxy'] = $auth_proxy;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return int
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param int $expires 
     *
     * @return $this
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets multi_ddi
     *
     * @return bool
     */
    public function getMultiDdi()
    {
        return $this->container['multi_ddi'];
    }

    /**
     * Sets multi_ddi
     *
     * @param bool $multi_ddi 
     *
     * @return $this
     */
    public function setMultiDdi($multi_ddi)
    {
        $this->container['multi_ddi'] = $multi_ddi;

        return $this;
    }

    /**
     * Gets contact_username
     *
     * @return string
     */
    public function getContactUsername()
    {
        return $this->container['contact_username'];
    }

    /**
     * Sets contact_username
     *
     * @param string $contact_username 
     *
     * @return $this
     */
    public function setContactUsername($contact_username)
    {
        if ((mb_strlen($contact_username) > 64)) {
            throw new \InvalidArgumentException('invalid length for $contact_username when calling DdiProviderRegistrationDetailed., must be smaller than or equal to 64.');
        }

        $this->container['contact_username'] = $contact_username;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ddi_provider
     *
     * @return \Delta/Voip\Model\DdiProvider
     */
    public function getDdiProvider()
    {
        return $this->container['ddi_provider'];
    }

    /**
     * Sets ddi_provider
     *
     * @param \Delta/Voip\Model\DdiProvider $ddi_provider ddi_provider
     *
     * @return $this
     */
    public function setDdiProvider($ddi_provider)
    {
        $this->container['ddi_provider'] = $ddi_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



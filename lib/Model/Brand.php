<?php
/**
 * Brand
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta\Voip\Model;

use \ArrayAccess;
use \Delta\Voip\ObjectSerializer;

/**
 * Brand Class Doc Comment
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Brand implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Brand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'id' => 'int',
        'logo' => '\Delta\Voip\Model\BrandLogo',
        'invoice' => '\Delta\Voip\Model\BrandInvoice',
        'language' => 'int',
        'default_timezone' => 'int',
        'currency' => 'int',
        'voicemail_notification_template' => 'int',
        'fax_notification_template' => 'int',
        'invoice_notification_template' => 'int',
        'call_csv_notification_template' => 'int',
        'max_daily_usage_notification_template' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'id' => null,
        'logo' => null,
        'invoice' => null,
        'language' => null,
        'default_timezone' => null,
        'currency' => null,
        'voicemail_notification_template' => null,
        'fax_notification_template' => null,
        'invoice_notification_template' => null,
        'call_csv_notification_template' => null,
        'max_daily_usage_notification_template' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'id' => 'id',
        'logo' => 'logo',
        'invoice' => 'invoice',
        'language' => 'language',
        'default_timezone' => 'defaultTimezone',
        'currency' => 'currency',
        'voicemail_notification_template' => 'voicemailNotificationTemplate',
        'fax_notification_template' => 'faxNotificationTemplate',
        'invoice_notification_template' => 'invoiceNotificationTemplate',
        'call_csv_notification_template' => 'callCsvNotificationTemplate',
        'max_daily_usage_notification_template' => 'maxDailyUsageNotificationTemplate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'logo' => 'setLogo',
        'invoice' => 'setInvoice',
        'language' => 'setLanguage',
        'default_timezone' => 'setDefaultTimezone',
        'currency' => 'setCurrency',
        'voicemail_notification_template' => 'setVoicemailNotificationTemplate',
        'fax_notification_template' => 'setFaxNotificationTemplate',
        'invoice_notification_template' => 'setInvoiceNotificationTemplate',
        'call_csv_notification_template' => 'setCallCsvNotificationTemplate',
        'max_daily_usage_notification_template' => 'setMaxDailyUsageNotificationTemplate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'logo' => 'getLogo',
        'invoice' => 'getInvoice',
        'language' => 'getLanguage',
        'default_timezone' => 'getDefaultTimezone',
        'currency' => 'getCurrency',
        'voicemail_notification_template' => 'getVoicemailNotificationTemplate',
        'fax_notification_template' => 'getFaxNotificationTemplate',
        'invoice_notification_template' => 'getInvoiceNotificationTemplate',
        'call_csv_notification_template' => 'getCallCsvNotificationTemplate',
        'max_daily_usage_notification_template' => 'getMaxDailyUsageNotificationTemplate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['default_timezone'] = isset($data['default_timezone']) ? $data['default_timezone'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['voicemail_notification_template'] = isset($data['voicemail_notification_template']) ? $data['voicemail_notification_template'] : null;
        $this->container['fax_notification_template'] = isset($data['fax_notification_template']) ? $data['fax_notification_template'] : null;
        $this->container['invoice_notification_template'] = isset($data['invoice_notification_template']) ? $data['invoice_notification_template'] : null;
        $this->container['call_csv_notification_template'] = isset($data['call_csv_notification_template']) ? $data['call_csv_notification_template'] : null;
        $this->container['max_daily_usage_notification_template'] = isset($data['max_daily_usage_notification_template']) ? $data['max_daily_usage_notification_template'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 75)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 75.";
        }

        if ($this->container['default_timezone'] === null) {
            $invalidProperties[] = "'default_timezone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Brand., must be smaller than or equal to 75.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \Delta\Voip\Model\BrandLogo
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \Delta\Voip\Model\BrandLogo $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Delta\Voip\Model\BrandInvoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Delta\Voip\Model\BrandInvoice $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets language
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param int $language 
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets default_timezone
     *
     * @return int
     */
    public function getDefaultTimezone()
    {
        return $this->container['default_timezone'];
    }

    /**
     * Sets default_timezone
     *
     * @param int $default_timezone 
     *
     * @return $this
     */
    public function setDefaultTimezone($default_timezone)
    {
        $this->container['default_timezone'] = $default_timezone;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return int
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param int $currency 
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets voicemail_notification_template
     *
     * @return int
     */
    public function getVoicemailNotificationTemplate()
    {
        return $this->container['voicemail_notification_template'];
    }

    /**
     * Sets voicemail_notification_template
     *
     * @param int $voicemail_notification_template 
     *
     * @return $this
     */
    public function setVoicemailNotificationTemplate($voicemail_notification_template)
    {
        $this->container['voicemail_notification_template'] = $voicemail_notification_template;

        return $this;
    }

    /**
     * Gets fax_notification_template
     *
     * @return int
     */
    public function getFaxNotificationTemplate()
    {
        return $this->container['fax_notification_template'];
    }

    /**
     * Sets fax_notification_template
     *
     * @param int $fax_notification_template 
     *
     * @return $this
     */
    public function setFaxNotificationTemplate($fax_notification_template)
    {
        $this->container['fax_notification_template'] = $fax_notification_template;

        return $this;
    }

    /**
     * Gets invoice_notification_template
     *
     * @return int
     */
    public function getInvoiceNotificationTemplate()
    {
        return $this->container['invoice_notification_template'];
    }

    /**
     * Sets invoice_notification_template
     *
     * @param int $invoice_notification_template 
     *
     * @return $this
     */
    public function setInvoiceNotificationTemplate($invoice_notification_template)
    {
        $this->container['invoice_notification_template'] = $invoice_notification_template;

        return $this;
    }

    /**
     * Gets call_csv_notification_template
     *
     * @return int
     */
    public function getCallCsvNotificationTemplate()
    {
        return $this->container['call_csv_notification_template'];
    }

    /**
     * Sets call_csv_notification_template
     *
     * @param int $call_csv_notification_template 
     *
     * @return $this
     */
    public function setCallCsvNotificationTemplate($call_csv_notification_template)
    {
        $this->container['call_csv_notification_template'] = $call_csv_notification_template;

        return $this;
    }

    /**
     * Gets max_daily_usage_notification_template
     *
     * @return int
     */
    public function getMaxDailyUsageNotificationTemplate()
    {
        return $this->container['max_daily_usage_notification_template'];
    }

    /**
     * Sets max_daily_usage_notification_template
     *
     * @param int $max_daily_usage_notification_template 
     *
     * @return $this
     */
    public function setMaxDailyUsageNotificationTemplate($max_daily_usage_notification_template)
    {
        $this->container['max_daily_usage_notification_template'] = $max_daily_usage_notification_template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * OutgoingRoutingCollection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta\Voip\Model;

use \ArrayAccess;
use \Delta\Voip\ObjectSerializer;

/**
 * OutgoingRoutingCollection Class Doc Comment
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutgoingRoutingCollection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutgoingRouting-collection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'string',
        'priority' => 'int',
        'weight' => 'int',
        'routing_mode' => 'string',
        'company' => 'int',
        'routing_tag' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'priority' => null,
        'weight' => null,
        'routing_mode' => null,
        'company' => null,
        'routing_tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'priority' => 'priority',
        'weight' => 'weight',
        'routing_mode' => 'routingMode',
        'company' => 'company',
        'routing_tag' => 'routingTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'priority' => 'setPriority',
        'weight' => 'setWeight',
        'routing_mode' => 'setRoutingMode',
        'company' => 'setCompany',
        'routing_tag' => 'setRoutingTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'priority' => 'getPriority',
        'weight' => 'getWeight',
        'routing_mode' => 'getRoutingMode',
        'company' => 'getCompany',
        'routing_tag' => 'getRoutingTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROUTING_MODE__STATIC = 'static';
    const ROUTING_MODE_LCR = 'lcr';
    const ROUTING_MODE_BLOCK = 'block';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoutingModeAllowableValues()
    {
        return [
            self::ROUTING_MODE__STATIC,
            self::ROUTING_MODE_LCR,
            self::ROUTING_MODE_BLOCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'group';
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['routing_mode'] = isset($data['routing_mode']) ? $data['routing_mode'] : 'static';
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['routing_tag'] = isset($data['routing_tag']) ? $data['routing_tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if (($this->container['priority'] < 0)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if (($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRoutingModeAllowableValues();
        if (!is_null($this->container['routing_mode']) && !in_array($this->container['routing_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'routing_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['routing_mode']) && (mb_strlen($this->container['routing_mode']) > 25)) {
            $invalidProperties[] = "invalid value for 'routing_mode', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type 
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority 
     *
     * @return $this
     */
    public function setPriority($priority)
    {

        if (($priority < 0)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling OutgoingRoutingCollection., must be bigger than or equal to 0.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight 
     *
     * @return $this
     */
    public function setWeight($weight)
    {

        if (($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling OutgoingRoutingCollection., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets routing_mode
     *
     * @return string
     */
    public function getRoutingMode()
    {
        return $this->container['routing_mode'];
    }

    /**
     * Sets routing_mode
     *
     * @param string $routing_mode 
     *
     * @return $this
     */
    public function setRoutingMode($routing_mode)
    {
        $allowedValues = $this->getRoutingModeAllowableValues();
        if (!is_null($routing_mode) && !in_array($routing_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'routing_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($routing_mode) && (mb_strlen($routing_mode) > 25)) {
            throw new \InvalidArgumentException('invalid length for $routing_mode when calling OutgoingRoutingCollection., must be smaller than or equal to 25.');
        }

        $this->container['routing_mode'] = $routing_mode;

        return $this;
    }

    /**
     * Gets company
     *
     * @return int
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param int $company 
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets routing_tag
     *
     * @return int
     */
    public function getRoutingTag()
    {
        return $this->container['routing_tag'];
    }

    /**
     * Sets routing_tag
     *
     * @param int $routing_tag 
     *
     * @return $this
     */
    public function setRoutingTag($routing_tag)
    {
        $this->container['routing_tag'] = $routing_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * KamApi
 * PHP version 5
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ivoz Provider
 *
 * Brand REST API
 *
 * OpenAPI spec version: 2.17.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Delta\Voip\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Delta\Voip\ApiException;
use Delta\Voip\Configuration;
use Delta\Voip\HeaderSelector;
use Delta\Voip\ObjectSerializer;

/**
 * KamApi Class Doc Comment
 *
 * @category Class
 * @package  Delta\Voip
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteUsersAddressItem
     *
     * Removes the UsersAddress resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteUsersAddressItem($id)
    {
        $this->deleteUsersAddressItemWithHttpInfo($id);
    }

    /**
     * Operation deleteUsersAddressItemWithHttpInfo
     *
     * Removes the UsersAddress resource.
     *
     * @param  string $id (required)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsersAddressItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteUsersAddressItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUsersAddressItemAsync
     *
     * Removes the UsersAddress resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUsersAddressItemAsync($id)
    {
        return $this->deleteUsersAddressItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUsersAddressItemAsyncWithHttpInfo
     *
     * Removes the UsersAddress resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUsersAddressItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteUsersAddressItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUsersAddressItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUsersAddressItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteUsersAddressItem'
            );
        }

        $resourcePath = '/users_addresses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsersAddressCollection
     *
     * Retrieves the collection of UsersAddress resources.
     *
     * @param  string $company company (optional)
     * @param  string $company2 company2 (optional)
     * @param  string $description description (optional)
     * @param  string $description_end description_end (optional)
     * @param  string $description_exact description_exact (optional)
     * @param  bool $description_exists description_exists (optional)
     * @param  string $description_partial description_partial (optional)
     * @param  string $description_start description_start (optional)
     * @param  int $id_exact id_exact (optional)
     * @param  string $source_address source_address (optional)
     * @param  string $source_address_end source_address_end (optional)
     * @param  string $source_address_exact source_address_exact (optional)
     * @param  string $source_address_partial source_address_partial (optional)
     * @param  string $source_address_start source_address_start (optional)
     * @param  string $_order_description _order_description (optional)
     * @param  string $_order_id _order_id (optional)
     * @param  string $_order_source_address _order_source_address (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties _properties (optional)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Delta\Voip\Model\UsersAddressCollection[]
     */
    public function getUsersAddressCollection($company = null, $company2 = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $source_address = null, $source_address_end = null, $source_address_exact = null, $source_address_partial = null, $source_address_start = null, $_order_description = null, $_order_id = null, $_order_source_address = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        list($response) = $this->getUsersAddressCollectionWithHttpInfo($company, $company2, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $source_address, $source_address_end, $source_address_exact, $source_address_partial, $source_address_start, $_order_description, $_order_id, $_order_source_address, $_items_per_page, $_page, $_properties);
        return $response;
    }

    /**
     * Operation getUsersAddressCollectionWithHttpInfo
     *
     * Retrieves the collection of UsersAddress resources.
     *
     * @param  string $company (optional)
     * @param  string $company2 (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $source_address (optional)
     * @param  string $source_address_end (optional)
     * @param  string $source_address_exact (optional)
     * @param  string $source_address_partial (optional)
     * @param  string $source_address_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_source_address (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Delta\Voip\Model\UsersAddressCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersAddressCollectionWithHttpInfo($company = null, $company2 = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $source_address = null, $source_address_end = null, $source_address_exact = null, $source_address_partial = null, $source_address_start = null, $_order_description = null, $_order_id = null, $_order_source_address = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Delta\Voip\Model\UsersAddressCollection[]';
        $request = $this->getUsersAddressCollectionRequest($company, $company2, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $source_address, $source_address_end, $source_address_exact, $source_address_partial, $source_address_start, $_order_description, $_order_id, $_order_source_address, $_items_per_page, $_page, $_properties);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Delta\Voip\Model\UsersAddressCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsersAddressCollectionAsync
     *
     * Retrieves the collection of UsersAddress resources.
     *
     * @param  string $company (optional)
     * @param  string $company2 (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $source_address (optional)
     * @param  string $source_address_end (optional)
     * @param  string $source_address_exact (optional)
     * @param  string $source_address_partial (optional)
     * @param  string $source_address_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_source_address (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersAddressCollectionAsync($company = null, $company2 = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $source_address = null, $source_address_end = null, $source_address_exact = null, $source_address_partial = null, $source_address_start = null, $_order_description = null, $_order_id = null, $_order_source_address = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        return $this->getUsersAddressCollectionAsyncWithHttpInfo($company, $company2, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $source_address, $source_address_end, $source_address_exact, $source_address_partial, $source_address_start, $_order_description, $_order_id, $_order_source_address, $_items_per_page, $_page, $_properties)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUsersAddressCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of UsersAddress resources.
     *
     * @param  string $company (optional)
     * @param  string $company2 (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $source_address (optional)
     * @param  string $source_address_end (optional)
     * @param  string $source_address_exact (optional)
     * @param  string $source_address_partial (optional)
     * @param  string $source_address_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_source_address (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersAddressCollectionAsyncWithHttpInfo($company = null, $company2 = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $source_address = null, $source_address_end = null, $source_address_exact = null, $source_address_partial = null, $source_address_start = null, $_order_description = null, $_order_id = null, $_order_source_address = null, $_items_per_page = null, $_page = null, $_properties = null)
    {
        $returnType = '\Delta\Voip\Model\UsersAddressCollection[]';
        $request = $this->getUsersAddressCollectionRequest($company, $company2, $description, $description_end, $description_exact, $description_exists, $description_partial, $description_start, $id_exact, $source_address, $source_address_end, $source_address_exact, $source_address_partial, $source_address_start, $_order_description, $_order_id, $_order_source_address, $_items_per_page, $_page, $_properties);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUsersAddressCollection'
     *
     * @param  string $company (optional)
     * @param  string $company2 (optional)
     * @param  string $description (optional)
     * @param  string $description_end (optional)
     * @param  string $description_exact (optional)
     * @param  bool $description_exists (optional)
     * @param  string $description_partial (optional)
     * @param  string $description_start (optional)
     * @param  int $id_exact (optional)
     * @param  string $source_address (optional)
     * @param  string $source_address_end (optional)
     * @param  string $source_address_exact (optional)
     * @param  string $source_address_partial (optional)
     * @param  string $source_address_start (optional)
     * @param  string $_order_description (optional)
     * @param  string $_order_id (optional)
     * @param  string $_order_source_address (optional)
     * @param  int $_items_per_page The number of items per page (optional)
     * @param  int $_page The collection page number (optional)
     * @param  string $_properties (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsersAddressCollectionRequest($company = null, $company2 = null, $description = null, $description_end = null, $description_exact = null, $description_exists = null, $description_partial = null, $description_start = null, $id_exact = null, $source_address = null, $source_address_end = null, $source_address_exact = null, $source_address_partial = null, $source_address_start = null, $_order_description = null, $_order_id = null, $_order_source_address = null, $_items_per_page = null, $_page = null, $_properties = null)
    {

        $resourcePath = '/users_addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($company !== null) {
            $queryParams['company'] = ObjectSerializer::toQueryValue($company);
        }
        // query params
        if ($company2 !== null) {
            $queryParams['company[]'] = ObjectSerializer::toQueryValue($company2);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($description_end !== null) {
            $queryParams['description[end]'] = ObjectSerializer::toQueryValue($description_end);
        }
        // query params
        if ($description_exact !== null) {
            $queryParams['description[exact]'] = ObjectSerializer::toQueryValue($description_exact);
        }
        // query params
        if ($description_exists !== null) {
            $queryParams['description[exists]'] = ObjectSerializer::toQueryValue($description_exists);
        }
        // query params
        if ($description_partial !== null) {
            $queryParams['description[partial]'] = ObjectSerializer::toQueryValue($description_partial);
        }
        // query params
        if ($description_start !== null) {
            $queryParams['description[start]'] = ObjectSerializer::toQueryValue($description_start);
        }
        // query params
        if ($id_exact !== null) {
            $queryParams['id[exact]'] = ObjectSerializer::toQueryValue($id_exact);
        }
        // query params
        if ($source_address !== null) {
            $queryParams['sourceAddress'] = ObjectSerializer::toQueryValue($source_address);
        }
        // query params
        if ($source_address_end !== null) {
            $queryParams['sourceAddress[end]'] = ObjectSerializer::toQueryValue($source_address_end);
        }
        // query params
        if ($source_address_exact !== null) {
            $queryParams['sourceAddress[exact]'] = ObjectSerializer::toQueryValue($source_address_exact);
        }
        // query params
        if ($source_address_partial !== null) {
            $queryParams['sourceAddress[partial]'] = ObjectSerializer::toQueryValue($source_address_partial);
        }
        // query params
        if ($source_address_start !== null) {
            $queryParams['sourceAddress[start]'] = ObjectSerializer::toQueryValue($source_address_start);
        }
        // query params
        if ($_order_description !== null) {
            $queryParams['_order[description]'] = ObjectSerializer::toQueryValue($_order_description);
        }
        // query params
        if ($_order_id !== null) {
            $queryParams['_order[id]'] = ObjectSerializer::toQueryValue($_order_id);
        }
        // query params
        if ($_order_source_address !== null) {
            $queryParams['_order[sourceAddress]'] = ObjectSerializer::toQueryValue($_order_source_address);
        }
        // query params
        if ($_items_per_page !== null) {
            $queryParams['_itemsPerPage'] = ObjectSerializer::toQueryValue($_items_per_page);
        }
        // query params
        if ($_page !== null) {
            $queryParams['_page'] = ObjectSerializer::toQueryValue($_page);
        }
        // query params
        if ($_properties !== null) {
            $queryParams['_properties[]'] = ObjectSerializer::toQueryValue($_properties);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsersAddressItem
     *
     * Retrieves a UsersAddress resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Delta\Voip\Model\UsersAddressDetailed
     */
    public function getUsersAddressItem($id)
    {
        list($response) = $this->getUsersAddressItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getUsersAddressItemWithHttpInfo
     *
     * Retrieves a UsersAddress resource.
     *
     * @param  string $id (required)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Delta\Voip\Model\UsersAddressDetailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersAddressItemWithHttpInfo($id)
    {
        $returnType = '\Delta\Voip\Model\UsersAddressDetailed';
        $request = $this->getUsersAddressItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Delta\Voip\Model\UsersAddressDetailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsersAddressItemAsync
     *
     * Retrieves a UsersAddress resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersAddressItemAsync($id)
    {
        return $this->getUsersAddressItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUsersAddressItemAsyncWithHttpInfo
     *
     * Retrieves a UsersAddress resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersAddressItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Delta\Voip\Model\UsersAddressDetailed';
        $request = $this->getUsersAddressItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUsersAddressItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUsersAddressItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUsersAddressItem'
            );
        }

        $resourcePath = '/users_addresses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postUsersAddressCollection
     *
     * Creates a UsersAddress resource.
     *
     * @param  \Delta\Voip\Model\UsersAddress $users_address The new UsersAddress resource (optional)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Delta\Voip\Model\UsersAddress
     */
    public function postUsersAddressCollection($users_address = null)
    {
        list($response) = $this->postUsersAddressCollectionWithHttpInfo($users_address);
        return $response;
    }

    /**
     * Operation postUsersAddressCollectionWithHttpInfo
     *
     * Creates a UsersAddress resource.
     *
     * @param  \Delta\Voip\Model\UsersAddress $users_address The new UsersAddress resource (optional)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Delta\Voip\Model\UsersAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUsersAddressCollectionWithHttpInfo($users_address = null)
    {
        $returnType = '\Delta\Voip\Model\UsersAddress';
        $request = $this->postUsersAddressCollectionRequest($users_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Delta\Voip\Model\UsersAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postUsersAddressCollectionAsync
     *
     * Creates a UsersAddress resource.
     *
     * @param  \Delta\Voip\Model\UsersAddress $users_address The new UsersAddress resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUsersAddressCollectionAsync($users_address = null)
    {
        return $this->postUsersAddressCollectionAsyncWithHttpInfo($users_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postUsersAddressCollectionAsyncWithHttpInfo
     *
     * Creates a UsersAddress resource.
     *
     * @param  \Delta\Voip\Model\UsersAddress $users_address The new UsersAddress resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUsersAddressCollectionAsyncWithHttpInfo($users_address = null)
    {
        $returnType = '\Delta\Voip\Model\UsersAddress';
        $request = $this->postUsersAddressCollectionRequest($users_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postUsersAddressCollection'
     *
     * @param  \Delta\Voip\Model\UsersAddress $users_address The new UsersAddress resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postUsersAddressCollectionRequest($users_address = null)
    {

        $resourcePath = '/users_addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($users_address)) {
            $_tempBody = $users_address;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putUsersAddressItem
     *
     * Replaces the UsersAddress resource.
     *
     * @param  string $id id (required)
     * @param  \Delta\Voip\Model\UsersAddress $users_address The updated UsersAddress resource (optional)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Delta\Voip\Model\UsersAddress
     */
    public function putUsersAddressItem($id, $users_address = null)
    {
        list($response) = $this->putUsersAddressItemWithHttpInfo($id, $users_address);
        return $response;
    }

    /**
     * Operation putUsersAddressItemWithHttpInfo
     *
     * Replaces the UsersAddress resource.
     *
     * @param  string $id (required)
     * @param  \Delta\Voip\Model\UsersAddress $users_address The updated UsersAddress resource (optional)
     *
     * @throws \Delta\Voip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Delta\Voip\Model\UsersAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUsersAddressItemWithHttpInfo($id, $users_address = null)
    {
        $returnType = '\Delta\Voip\Model\UsersAddress';
        $request = $this->putUsersAddressItemRequest($id, $users_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Delta\Voip\Model\UsersAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putUsersAddressItemAsync
     *
     * Replaces the UsersAddress resource.
     *
     * @param  string $id (required)
     * @param  \Delta\Voip\Model\UsersAddress $users_address The updated UsersAddress resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUsersAddressItemAsync($id, $users_address = null)
    {
        return $this->putUsersAddressItemAsyncWithHttpInfo($id, $users_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putUsersAddressItemAsyncWithHttpInfo
     *
     * Replaces the UsersAddress resource.
     *
     * @param  string $id (required)
     * @param  \Delta\Voip\Model\UsersAddress $users_address The updated UsersAddress resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putUsersAddressItemAsyncWithHttpInfo($id, $users_address = null)
    {
        $returnType = '\Delta\Voip\Model\UsersAddress';
        $request = $this->putUsersAddressItemRequest($id, $users_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putUsersAddressItem'
     *
     * @param  string $id (required)
     * @param  \Delta\Voip\Model\UsersAddress $users_address The updated UsersAddress resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putUsersAddressItemRequest($id, $users_address = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putUsersAddressItem'
            );
        }

        $resourcePath = '/users_addresses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($users_address)) {
            $_tempBody = $users_address;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/ld+json'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
